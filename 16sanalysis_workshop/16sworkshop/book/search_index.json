[
["day-one.html", "2 Day One 2.1 What are we trying to achieve 2.2 Basics &amp; Background 2.3 DADA2 pipeline (v1.2)", " 2 Day One We are very excited to teach this course for the first time and share what we know with you all So lets start by talking about the very basics: 2.1 What are we trying to achieve Our goal is very similar to gathering data on a city neighbourhood to find out who lives there, how the demographic changes over time or in case of a drastic event. We can gather more information by asking about neighbours, quality of life etc. Similarly when we are looking at microbial communities our first question is who is there, how abundant and how their presence changes over time or when conditions change. We can also ask questions like how the microbiomes are interacting with each other (metabolites). For the scope of this workshop we will stick to the simple questions: who and how much? 2.2 Basics &amp; Background Here is the link to the lecture we will start with today: workshop Key points are: Think of a hypothesis before doing an experiment Spend time on experiment design. Sample size, 16s region to amplify etc Talk to a bioinformatician Think about the depth of sequencing if you want to capture the less abundant taxa Add negative control to account for contamination Thoughtful data analysis is critical for successful identification of microbes “If you torture the data long enough, it will confess.”- Ronald Coase, Economist 2.3 DADA2 pipeline (v1.2) From now on, we will be working on the DADA2 package version 1.12. DADA2 has great documentation and an excellent tutorial online.Please go to the following link http://benjjneb.github.io/dada2/tutorial.html All the notes from now on are my additional comments to help you follow the pipeline: 2.3.1 Data for the tutorial The data to use for the tutorial can be downloaded from here 2.3.2 Getting ready ( load packages and get file list) Functions that we will be using here are : list.files() sort() strsplit() basename() sapply() 2.3.3 Inspect read quality profiles Read in files library(dada2); ## Loading required package: Rcpp library(limma) path &lt;- &quot;MiSeq_SOP/&quot; list.files(path) ## [1] &quot;F3D0_S188_L001_R1_001.fastq&quot; &quot;F3D0_S188_L001_R2_001.fastq&quot; ## [3] &quot;F3D1_S189_L001_R1_001.fastq&quot; &quot;F3D1_S189_L001_R2_001.fastq&quot; ## [5] &quot;F3D141_S207_L001_R1_001.fastq&quot; &quot;F3D141_S207_L001_R2_001.fastq&quot; ## [7] &quot;F3D142_S208_L001_R1_001.fastq&quot; &quot;F3D142_S208_L001_R2_001.fastq&quot; ## [9] &quot;F3D143_S209_L001_R1_001.fastq&quot; &quot;F3D143_S209_L001_R2_001.fastq&quot; ## [11] &quot;F3D144_S210_L001_R1_001.fastq&quot; &quot;F3D144_S210_L001_R2_001.fastq&quot; ## [13] &quot;F3D145_S211_L001_R1_001.fastq&quot; &quot;F3D145_S211_L001_R2_001.fastq&quot; ## [15] &quot;F3D146_S212_L001_R1_001.fastq&quot; &quot;F3D146_S212_L001_R2_001.fastq&quot; ## [17] &quot;F3D147_S213_L001_R1_001.fastq&quot; &quot;F3D147_S213_L001_R2_001.fastq&quot; ## [19] &quot;F3D148_S214_L001_R1_001.fastq&quot; &quot;F3D148_S214_L001_R2_001.fastq&quot; ## [21] &quot;F3D149_S215_L001_R1_001.fastq&quot; &quot;F3D149_S215_L001_R2_001.fastq&quot; ## [23] &quot;F3D150_S216_L001_R1_001.fastq&quot; &quot;F3D150_S216_L001_R2_001.fastq&quot; ## [25] &quot;F3D2_S190_L001_R1_001.fastq&quot; &quot;F3D2_S190_L001_R2_001.fastq&quot; ## [27] &quot;F3D3_S191_L001_R1_001.fastq&quot; &quot;F3D3_S191_L001_R2_001.fastq&quot; ## [29] &quot;F3D5_S193_L001_R1_001.fastq&quot; &quot;F3D5_S193_L001_R2_001.fastq&quot; ## [31] &quot;F3D6_S194_L001_R1_001.fastq&quot; &quot;F3D6_S194_L001_R2_001.fastq&quot; ## [33] &quot;F3D7_S195_L001_R1_001.fastq&quot; &quot;F3D7_S195_L001_R2_001.fastq&quot; ## [35] &quot;F3D8_S196_L001_R1_001.fastq&quot; &quot;F3D8_S196_L001_R2_001.fastq&quot; ## [37] &quot;F3D9_S197_L001_R1_001.fastq&quot; &quot;F3D9_S197_L001_R2_001.fastq&quot; ## [39] &quot;HMP_MOCK.v35.fasta&quot; &quot;Mock_S280_L001_R1_001.fastq&quot; ## [41] &quot;Mock_S280_L001_R2_001.fastq&quot; &quot;mouse.dpw.metadata&quot; ## [43] &quot;mouse.time.design&quot; &quot;stability.batch&quot; ## [45] &quot;stability.files&quot; # Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq fnFs &lt;- sort(list.files(path, pattern=&quot;_R1_001.fastq&quot;, full.names = TRUE)) fnRs &lt;- sort(list.files(path, pattern=&quot;_R2_001.fastq&quot;, full.names = TRUE)) # Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq tmp&lt;-strsplit(basename(fnFs), &quot;_&quot;) # As tmp is a list of vectors, we will have to use sapply function to get the first position out from each vector. The symbol &#39;[&#39; tells sapplly function that it is a vector and 1 specifies the vector index samples.names&lt;-sapply(tmp,&#39;[&#39;,1) 2.3.4 Lets make plots to look at the quality for multiple files plotQualityProfile(fnFs[1:2]) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which ## will replace the existing scale. "]
]
